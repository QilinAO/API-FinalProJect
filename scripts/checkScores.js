const { createClient } = require('@supabase/supabase-js');

const SUPABASE_URL = 'https://lgnhyqwtilthhqvlgvnd.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxnbmh5cXd0aWx0aGhxdmxndm5kIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDMxNDQ4OCwiZXhwIjoyMDY1ODkwNDg4fQ.IccXmRcb_OaUA1tXvjmjF-V3pNdpbY7OzHmoPgbs_hE';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

async function checkScores() {
  try {
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n');

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Assignments ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    console.log('üìã 1. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Assignments ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:');
    const { data: assignments, error: assignmentsError } = await supabase
      .from('assignments')
      .select(`
        id,
        status,
        total_score,
        scores,
        assigned_at,
        evaluated_at,
        submission:submissions!inner(fish_name, fish_type, owner:profiles(first_name, last_name)),
        evaluator:profiles!assignments_evaluator_id_fkey(first_name, last_name)
      `)
      .not('total_score', 'is', null)
      .order('evaluated_at', { ascending: false });

    if (assignmentsError) {
      console.error('‚ùå Error fetching assignments:', assignmentsError);
      return;
    }

    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Assignments ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${assignments.length}`);
    assignments.forEach(assign => {
      console.log(`   - ${assign.submission.fish_name} (${assign.submission.fish_type})`);
      console.log(`     ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: ${assign.evaluator.first_name} ${assign.evaluator.last_name}`);
      console.log(`     ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${assign.total_score}`);
      console.log(`     ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:`, assign.scores);
      console.log(`     ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${assign.evaluated_at}`);
      console.log('');
    });

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Submissions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    console.log('üìã 2. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Submissions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:');
    const { data: submissions, error: submissionsError } = await supabase
      .from('submissions')
      .select(`
        id,
        fish_name,
        fish_type,
        final_score,
        status,
        submitted_at,
        owner:profiles(first_name, last_name)
      `)
      .not('final_score', 'is', null)
      .order('submitted_at', { ascending: false });

    if (submissionsError) {
      console.error('‚ùå Error fetching submissions:', submissionsError);
      return;
    }

    console.log(`üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Submissions ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${submissions.length}`);
    submissions.forEach(sub => {
      console.log(`   - ${sub.fish_name} (${sub.fish_type})`);
      console.log(`     ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á: ${sub.owner.first_name} ${sub.owner.last_name}`);
      console.log(`     ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${sub.final_score}`);
      console.log(`     ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${sub.status}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

checkScores(); 