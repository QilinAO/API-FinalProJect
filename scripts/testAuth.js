// ======================================================================
// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á token
// ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: node scripts/testAuth.js
// ======================================================================

const axios = require('axios');

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
const API_BASE_URL = 'http://localhost:5000/api';

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const testUsers = [
  {
    email: 'somchai.jaidee@gmail.com',
    password: 'zzpp1234',
    role: 'user'
  },
  {
    email: 'montri.borihan@gmail.com',
    password: 'zzpp1234',
    role: 'manager'
  },
  {
    email: 'wichai.phuchiacharn@gmail.com',
    password: 'zzpp1234',
    role: 'expert'
  }
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
async function testSignIn(email, password) {
  try {
    console.log(`üîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: ${email}`);
    
    const response = await axios.post(`${API_BASE_URL}/auth/signin`, {
      email,
      password
    });

    if (response.data.success) {
      console.log(`‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${email}`);
      console.log(`   Token: ${response.data.token.substring(0, 50)}...`);
      console.log(`   Role: ${response.data.profile.role}`);
      console.log(`   Name: ${response.data.profile.first_name} ${response.data.profile.last_name}`);
      
      return {
        success: true,
        token: response.data.token,
        profile: response.data.profile
      };
    } else {
      console.log(`‚ùå ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${email}`);
      return { success: false };
    }
  } catch (error) {
    console.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: ${email}`);
    console.error(`   ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.response?.data?.error || error.message}`);
    return { success: false, error: error.response?.data?.error || error.message };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoints
async function testApiEndpoints(token, role) {
  console.log(`\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö role: ${role}`);
  
  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };

  const endpoints = [
    { name: 'Profile', url: '/auth/profile', method: 'GET' },
    { name: 'Health', url: '/health', method: 'GET' }
  ];

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoints ‡∏ï‡∏≤‡∏° role
  if (role === 'user') {
    endpoints.push(
      { name: 'User Dashboard', url: '/users/dashboard', method: 'GET' },
      { name: 'User Contests', url: '/users/contests', method: 'GET' }
    );
  } else if (role === 'manager') {
    endpoints.push(
      { name: 'Manager Dashboard', url: '/manager/dashboard', method: 'GET' },
      { name: 'Manager Contests', url: '/manager/contests', method: 'GET' }
    );
  } else if (role === 'expert') {
    endpoints.push(
      { name: 'Expert Dashboard', url: '/experts/dashboard', method: 'GET' },
      { name: 'Expert Queue', url: '/experts/queue', method: 'GET' },
      { name: 'Expert Specialities', url: '/experts/specialities', method: 'GET' }
    );
  }

  for (const endpoint of endpoints) {
    try {
      console.log(`   üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${endpoint.name}...`);
      
      const response = await axios({
        method: endpoint.method,
        url: `${API_BASE_URL}${endpoint.url}`,
        headers
      });

      if (response.data.success) {
        console.log(`   ‚úÖ ${endpoint.name}: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } else {
        console.log(`   ‚ö†Ô∏è  ${endpoint.name}: ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ${response.data.error}`);
      }
    } catch (error) {
      console.log(`   ‚ùå ${endpoint.name}: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - ${error.response?.status} ${error.response?.data?.error || error.message}`);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö submissions endpoint
async function testSubmissionsEndpoint(token) {
  console.log(`\nüìã ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Submissions endpoint`);
  
  const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };

  try {
    console.log(`   üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET /submissions...`);
    
    const response = await axios.get(`${API_BASE_URL}/submissions`, { headers });

    if (response.data.success) {
      console.log(`   ‚úÖ Submissions: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      console.log(`   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô submissions: ${response.data.data?.length || 0}`);
    } else {
      console.log(`   ‚ö†Ô∏è  Submissions: ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ${response.data.error}`);
    }
  } catch (error) {
    console.log(`   ‚ùå Submissions: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î - ${error.response?.status} ${error.response?.data?.error || error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞ API endpoints...\n');

  for (const user of testUsers) {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`üë§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.email} (${user.role})`);
    console.log(`${'='.repeat(60)}`);

    const signInResult = await testSignIn(user.email, user.password);
    
    if (signInResult.success) {
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API endpoints
      await testApiEndpoints(signInResult.token, user.role);
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö submissions endpoint
      await testSubmissionsEndpoint(signInResult.token);
    }
  }

  console.log(`\n${'='.repeat(60)}`);
  console.log('üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö!');
  console.log(`${'='.repeat(60)}`);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
function checkConfiguration() {
  console.log('üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤...');
  
  if (!API_BASE_URL || API_BASE_URL === 'http://localhost:5000/api') {
    console.log('‚ö†Ô∏è  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API_BASE_URL ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }

  console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n');
  return true;
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
async function run() {
  try {
    if (!checkConfiguration()) {
      return;
    }

    await main();
    
  } catch (error) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå:', error.message);
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
if (require.main === module) {
  run();
}

module.exports = { 
  testSignIn, 
  testApiEndpoints, 
  testSubmissionsEndpoint 
}; 