#!/usr/bin/env node

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏ó‡∏µ‡πà Frontend BettaEvaluationForm ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
 * ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô /model/analyze-single ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ auth
 */

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// Configuration
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000';
const TEST_IMAGE_PATH = path.join(__dirname, 'test_betta_fish.jpg');

console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend API Integration');
console.log(`üì° Backend URL: ${API_BASE_URL}`);
console.log(`üñºÔ∏è  Test Image: ${TEST_IMAGE_PATH}`);
console.log('');

async function testModelAnalysis() {
  console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö /model/analyze-single (‡∏ó‡∏µ‡πà Frontend ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ)');
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    if (!fs.existsSync(TEST_IMAGE_PATH)) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', TEST_IMAGE_PATH);
      return;
    }

    const imageBuffer = fs.readFileSync(TEST_IMAGE_PATH);
    console.log(`üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${imageBuffer.length} bytes`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á FormData ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà Frontend ‡∏ó‡∏≥
    const formData = new FormData();
    formData.append('image', imageBuffer, {
      filename: 'test_betta.jpg',
      contentType: 'image/jpeg'
    });
    formData.append('betta_type', 'AUTO');
    formData.append('analysis_type', 'quality');

    console.log('üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á /model/analyze-single...');
    
    const response = await axios.post(`${API_BASE_URL}/api/model/analyze-single`, formData, {
      headers: {
        ...formData.getHeaders(),
        // ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà Authorization ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ endpoint ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ auth
      },
      timeout: 60000 // 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });

    console.log('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Backend:');
    console.log('==================================================');
    console.log(JSON.stringify(response.data, null, 2));
    console.log('==================================================');

    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const result = response.data;
    if (result.success && result.data) {
      const analysisData = result.data;
      const finalLabel = analysisData.final_label;
      const top1 = analysisData.top1;

      console.log('\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
      console.log(`üèÜ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î: ${finalLabel.code} (${finalLabel.name})`);
      console.log(`üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${(top1.prob * 100).toFixed(2)}%`);
      console.log(`ü§ñ ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà: ${analysisData.is_confident ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}`);
      console.log(`üí¨ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${finalLabel.reason}`);

      if (analysisData.topk && analysisData.topk.length > 0) {
        console.log('\nüìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:');
        analysisData.topk.forEach((item, index) => {
          console.log(`   ${index + 1}. ${item.name} (${item.code}): ${(item.score * 100).toFixed(2)}%`);
        });
      }

      console.log('\n‚úÖ Frontend ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
    } else {
      console.log('‚ùå ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', result);
    }

  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Backend server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà');
      console.log('   - ‡πÄ‡∏£‡∏¥‡πà‡∏° Backend: cd API-FinalProJect && npm start');
    }
  }
}

async function testModelHealth() {
  console.log('üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö /model/health');
  
  try {
    const response = await axios.get(`${API_BASE_URL}/api/model/health`);
    console.log('‚úÖ Model Health Status:');
    console.log(JSON.stringify(response.data, null, 2));
  } catch (error) {
    console.error('‚ùå Health Check Error:', error.response?.data || error.message);
  }
}

async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend API Integration\n');

  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö health check
  await testModelHealth();
  console.log('');

  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö model analysis (‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Frontend)
  await testModelAnalysis();

  console.log('\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  console.log('üìö ‡∏´‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ Frontend ‡∏Å‡πá‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß!');
}

main().catch(console.error);
