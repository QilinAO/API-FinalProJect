#!/usr/bin/env node

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI Model Integration
 */

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

// Configuration
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:19003';
const TEST_IMAGE_PATH = path.join(__dirname, 'test_betta_fish.jpg');

console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI Model');
console.log('='.repeat(60));

async function testInvalidImage() {
  console.log('\n1. üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
  
  try {
    const formData = new FormData();
    formData.append('image', Buffer.from('invalid image data'), {
      filename: 'test.txt',
      contentType: 'text/plain'
    });
    formData.append('betta_type', 'AUTO');
    formData.append('analysis_type', 'quality');

    const response = await axios.post(`${API_BASE_URL}/model/analyze-single`, formData, {
      headers: {
        ...formData.getHeaders(),
      },
      timeout: 10000
    });

    console.log('‚ùå ‡∏Ñ‡∏ß‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Error ‡πÅ‡∏ï‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response.data);
  } catch (error) {
    if (error.response) {
      console.log('‚úÖ Error Response ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:');
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Error: ${error.response.data?.error || '‡πÑ‡∏°‡πà‡∏°‡∏µ error message'}`);
    } else {
      console.log('‚ùå Network Error:', error.message);
    }
  }
}

async function testMissingImage() {
  console.log('\n2. üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
  
  try {
    const formData = new FormData();
    formData.append('betta_type', 'AUTO');
    formData.append('analysis_type', 'quality');

    const response = await axios.post(`${API_BASE_URL}/model/analyze-single`, formData, {
      headers: {
        ...formData.getHeaders(),
      },
      timeout: 10000
    });

    console.log('‚ùå ‡∏Ñ‡∏ß‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Error ‡πÅ‡∏ï‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response.data);
  } catch (error) {
    if (error.response) {
      console.log('‚úÖ Error Response ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:');
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Error: ${error.response.data?.error || '‡πÑ‡∏°‡πà‡∏°‡∏µ error message'}`);
    } else {
      console.log('‚ùå Network Error:', error.message);
    }
  }
}

async function testModelHealthWhenOffline() {
  console.log('\n3. üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Model Health Check');
  
  try {
    const response = await axios.get(`${API_BASE_URL}/model/health`, {
      timeout: 10000
    });
    
    console.log('‚úÖ Health Check Response:');
    console.log(JSON.stringify(response.data, null, 2));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á response
    const data = response.data;
    if (data.success !== undefined && data.data && data.timestamp) {
      console.log('‚úÖ Health Check Response ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else {
      console.log('‚ùå Health Check Response ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
  } catch (error) {
    if (error.response) {
      console.log('‚ùå Health Check Error:');
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Error: ${error.response.data?.error || '‡πÑ‡∏°‡πà‡∏°‡∏µ error message'}`);
    } else {
      console.log('‚ùå Network Error:', error.message);
    }
  }
}

async function testLargeImage() {
  console.log('\n4. üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)');
  
  if (!fs.existsSync(TEST_IMAGE_PATH)) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏° test ‡∏ô‡∏µ‡πâ');
    return;
  }
  
  try {
    const imageBuffer = fs.readFileSync(TEST_IMAGE_PATH);
    console.log(`üìè ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${imageBuffer.length} bytes`);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏õ‡∏•‡∏≠‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (> 10MB)
    const largeBuffer = Buffer.alloc(11 * 1024 * 1024, 0); // 11MB
    
    const formData = new FormData();
    formData.append('image', largeBuffer, {
      filename: 'large_image.jpg',
      contentType: 'image/jpeg'
    });
    formData.append('betta_type', 'AUTO');
    formData.append('analysis_type', 'quality');

    const response = await axios.post(`${API_BASE_URL}/model/analyze-single`, formData, {
      headers: {
        ...formData.getHeaders(),
      },
      timeout: 30000
    });

    console.log('‚ùå ‡∏Ñ‡∏ß‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Error (file too large) ‡πÅ‡∏ï‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', response.data);
  } catch (error) {
    if (error.response) {
      console.log('‚úÖ Large File Error Response ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:');
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Error: ${error.response.data?.error || '‡πÑ‡∏°‡πà‡∏°‡∏µ error message'}`);
    } else if (error.code === 'ECONNREFUSED') {
      console.log('‚ùå ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    } else {
      console.log('‚úÖ Network/Timeout Error (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á):', error.message);
    }
  }
}

async function testValidImageWithGoodErrorHandling() {
  console.log('\n5. üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏î‡∏π Error Handling ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Model ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)');
  
  if (!fs.existsSync(TEST_IMAGE_PATH)) {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏° test ‡∏ô‡∏µ‡πâ');
    return;
  }
  
  try {
    const imageBuffer = fs.readFileSync(TEST_IMAGE_PATH);
    
    const formData = new FormData();
    formData.append('image', imageBuffer, {
      filename: 'test_betta.jpg',
      contentType: 'image/jpeg'
    });
    formData.append('betta_type', 'AUTO');
    formData.append('analysis_type', 'quality');

    const response = await axios.post(`${API_BASE_URL}/model/analyze-single`, formData, {
      headers: {
        ...formData.getHeaders(),
      },
      timeout: 60000
    });

    console.log('‚úÖ API Response:');
    console.log(JSON.stringify(response.data, null, 2));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á response
    const data = response.data;
    if (data.success && data.data) {
      console.log('‚úÖ Model API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } else if (!data.success && data.error) {
      console.log('‚úÖ Model API Error Handling ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      console.log(`   Error: ${data.error}`);
    } else {
      console.log('‚ùå Response format ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    
  } catch (error) {
    if (error.response) {
      console.log('‚úÖ Model Error Response:');
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Error: ${error.response.data?.error || '‡πÑ‡∏°‡πà‡∏°‡∏µ error message'}`);
      console.log('   ‚úÖ Error handling ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('‚ùå ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡πÄ‡∏£‡∏¥‡πà‡∏° Backend ‡∏Å‡πà‡∏≠‡∏ô');
    } else {
      console.log('‚ùå Network Error:', error.message);
    }
  }
}

async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling\n');

  await testInvalidImage();
  await testMissingImage();
  await testModelHealthWhenOffline();
  await testLargeImage();
  await testValidImageWithGoodErrorHandling();

  console.log('\nüèÅ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
  console.log('='.repeat(60));
  console.log('üìö ‡∏™‡∏£‡∏∏‡∏õ: Error Handling ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏ö errors ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á response ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°');
}

main().catch(console.error);
