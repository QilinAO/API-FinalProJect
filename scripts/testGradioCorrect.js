const axios = require('axios');
const fs = require('fs');

// HuggingFace Space URL ‡πÅ‡∏•‡∏∞ API endpoint
const SPACE_URL = 'https://qilinao-betta-ts-space.hf.space';
const GRADIO_API_URL = `${SPACE_URL}/gradio_api/call/predict`;

async function testGradioCorrect() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö HuggingFace Space ‡∏î‡πâ‡∏ß‡∏¢ Gradio API ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á...\n');
  
  try {
    const testImagePath = './test_betta_fish.jpg';
    
    if (!fs.existsSync(testImagePath)) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testImagePath);
      return;
    }

    console.log('üì° ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gradio API...');
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô base64
    const imageBuffer = fs.readFileSync(testImagePath);
    const base64Image = `data:image/jpeg;base64,${imageBuffer.toString('base64')}`;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á session hash
    const sessionHash = Math.random().toString(36).substring(2);
    
    // Gradio API call format (‡∏à‡∏≤‡∏Å config ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ)
    const requestData = {
      data: [
        {
          path: null,
          url: base64Image,
          size: imageBuffer.length,
          orig_name: "test_betta_fish.jpg",
          mime_type: "image/jpeg",
          is_stream: false,
          meta: { _type: "gradio.FileData" }
        }
      ],
      event_data: null,
      fn_index: 2, // ‡∏à‡∏≤‡∏Å dependencies ‡∏ó‡∏µ‡πà‡∏°‡∏µ api_name: "predict"
      trigger_id: 12, // component ID ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° Submit
      session_hash: sessionHash
    };
    
    console.log('üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gradio...');
    console.log('   Session Hash:', sessionHash);
    console.log('   Image Size:', imageBuffer.length, 'bytes');
    
    const response = await axios.post(GRADIO_API_URL, requestData, {
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'text/event-stream',
      },
      timeout: 60000
    });

    console.log('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response ‡∏à‡∏≤‡∏Å Gradio!');
    console.log('üìä Response Status:', response.status);
    console.log('üìä Response Data:', response.data);
    
    // ‡∏ñ‡πâ‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô event stream, ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if (typeof response.data === 'string') {
      console.log('\nüì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å model...');
      
      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å event stream
      const lines = response.data.split('\n');
      for (const line of lines) {
        if (line.startsWith('data: ')) {
          try {
            const data = JSON.parse(line.substring(6));
            if (data.msg === 'process_completed') {
              console.log('üéâ Model ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');
              console.log('üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', JSON.stringify(data.output?.data, null, 2));
              
              if (data.output?.data) {
                analyzeResult(data.output.data);
              }
              break;
            }
          } catch (e) {
            // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
          }
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    
    if (error.response) {
      console.error('üìÑ Response Status:', error.response.status);
      console.error('üìÑ Response Headers:', error.response.headers);
      console.error('üìÑ Response Data:', error.response.data);
    }
  }
}

// ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function analyzeResult(resultData) {
  console.log('\nüîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
  
  if (Array.isArray(resultData) && resultData.length >= 2) {
    const prediction = resultData[0]; // ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    const probabilities = resultData[1]; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
    
    console.log('üèÜ Prediction:', prediction);
    
    if (probabilities && typeof probabilities === 'object') {
      console.log('üìà Probabilities:');
      Object.entries(probabilities).forEach(([label, prob]) => {
        console.log(`   ${label}: ${(prob * 100).toFixed(2)}%`);
      });
      
      // ‡∏´‡∏≤ top prediction
      const topEntry = Object.entries(probabilities).reduce((a, b) => 
        a[1] > b[1] ? a : b
      );
      console.log(`\nüéØ Top Prediction: ${topEntry[0]} (${(topEntry[1] * 100).toFixed(2)}%)`);
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
      const bettaType = extractBettaTypeFromLabel(topEntry[0]);
      console.log(`üê† Betta Type: ${bettaType}`);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î
function extractBettaTypeFromLabel(label) {
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÅ‡∏ô‡∏Å isaan / mahachai / south
  const mapping = {
    'isaan': 'A',
    'mahachai': 'B', 
    'south': 'C'
  };
  
  const lowerLabel = label.toLowerCase();
  for (const [key, value] of Object.entries(mapping)) {
    if (lowerLabel.includes(key)) {
      return value;
    }
  }
  
  return 'UNKNOWN';
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testGradioCorrect().catch(console.error);
