const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');

const API_BASE_URL = 'http://localhost:5000/api';
const MODEL_API_URL = 'http://localhost:8000';

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const testUsers = [
  { email: 'somchai.jaidee@gmail.com', password: 'zzpp1234', role: 'user' },
  { email: 'montri.borihan@gmail.com', password: 'zzpp1234', role: 'manager' },
  { email: 'wichai.phuchiacharn@gmail.com', password: 'zzpp1234', role: 'expert' }
];

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
async function testApiConnection() {
  console.log('üîå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API...');
  
  try {
    const response = await axios.get(`${API_BASE_URL}/health`, { timeout: 5000 });
    console.log('‚úÖ API Server ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
    return true;
  } catch (error) {
    console.log('‚ùå API Server ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Model API
async function testModelApiConnection() {
  console.log('\nü§ñ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Model API...');
  
  try {
    const response = await axios.get(`${MODEL_API_URL}/`, { timeout: 5000 });
    console.log('‚úÖ Model API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
    console.log(`   Status: ${response.data.status}`);
    console.log(`   Device: ${response.data.device}`);
    return true;
  } catch (error) {
    console.log('‚ùå Model API ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
    console.log(`   Error: ${error.message}`);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
async function testAuthentication() {
  console.log('\nüîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...');
  
  const results = [];
  
  for (const user of testUsers) {
    try {
      console.log(`   üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${user.email}`);
      
      const response = await axios.post(`${API_BASE_URL}/auth/signin`, {
        email: user.email,
        password: user.password
      });

      if (response.data.success) {
        console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${user.email} (${user.role})`);
        results.push({
          user: user.email,
          role: user.role,
          success: true,
          token: response.data.token
        });
      } else {
        console.log(`   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${user.email}`);
        results.push({
          user: user.email,
          role: user.role,
          success: false,
          error: response.data.error
        });
      }
    } catch (error) {
      console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${user.email}`);
      console.log(`      Error: ${error.response?.data?.error || error.message}`);
      results.push({
        user: user.email,
        role: user.role,
        success: false,
        error: error.response?.data?.error || error.message
      });
    }
  }
  
  return results;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints
async function testApiEndpoints(authResults) {
  console.log('\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints...');
  
  const endpoints = [
    // Public endpoints
    { name: 'Health Check', url: '/health', method: 'GET', auth: false },
    { name: 'Public Contests', url: '/public/contests', method: 'GET', auth: false },
    
    // User endpoints
    { name: 'User Dashboard', url: '/users/dashboard', method: 'GET', auth: true, role: 'user' },
    { name: 'User Contests', url: '/users/contests', method: 'GET', auth: true, role: 'user' },
    { name: 'User History', url: '/users/history/evaluations', method: 'GET', auth: true, role: 'user' },
    
    // Manager endpoints
    { name: 'Manager Dashboard', url: '/manager/dashboard', method: 'GET', auth: true, role: 'manager' },
    { name: 'Manager Contests', url: '/manager/contests', method: 'GET', auth: true, role: 'manager' },
    
    // Expert endpoints
    { name: 'Expert Dashboard', url: '/experts/dashboard', method: 'GET', auth: true, role: 'expert' },
    { name: 'Expert Queue', url: '/experts/queue', method: 'GET', auth: true, role: 'expert' },
    { name: 'Expert History', url: '/experts/history', method: 'GET', auth: true, role: 'expert' },
    { name: 'Expert Specialities', url: '/experts/specialities', method: 'GET', auth: true, role: 'expert' },
    
    // Submission endpoints
    { name: 'Submissions', url: '/submissions', method: 'GET', auth: true, role: 'user' }
  ];
  
  for (const endpoint of endpoints) {
    try {
      console.log(`   üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${endpoint.name}`);
      
      let headers = { 'Content-Type': 'application/json' };
      let url = `${API_BASE_URL}${endpoint.url}`;
      
      if (endpoint.auth) {
        const user = authResults.find(r => r.success && r.role === endpoint.role);
        if (!user) {
          console.log(`   ‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°: ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${endpoint.role}`);
          continue;
        }
        headers['Authorization'] = `Bearer ${user.token}`;
      }
      
      const response = await axios({
        method: endpoint.method,
        url: url,
        headers: headers,
        timeout: 10000
      });
      
      if (response.data.success !== false) {
        console.log(`   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${endpoint.name}`);
      } else {
        console.log(`   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${endpoint.name} - ${response.data.error}`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${endpoint.name}`);
      console.log(`      Status: ${error.response?.status}`);
      console.log(`      Error: ${error.response?.data?.error || error.message}`);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö Database
async function testDatabase() {
  console.log('\nüóÑÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Database...');
  
  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const response = await axios.get(`${API_BASE_URL}/admin/users`, {
      headers: {
        'Authorization': 'Bearer admin-token-placeholder',
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    console.log('‚úÖ Database ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ');
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('‚úÖ Database ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ admin token)');
    } else {
      console.log('‚ùå Database ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
      console.log(`   Error: ${error.response?.data?.error || error.message}`);
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö File Upload
async function testFileUpload(authResults) {
  console.log('\nüìÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö File Upload...');
  
  const user = authResults.find(r => r.success && r.role === 'user');
  if (!user) {
    console.log('   ‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°: ‡πÑ‡∏°‡πà‡∏°‡∏µ user token');
    return;
  }
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mock image
    const mockImageBuffer = Buffer.from('fake image data for testing');
    const formData = new FormData();
    formData.append('fish_name', '‡∏õ‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
    formData.append('fish_type', 'A');
    formData.append('fish_description', '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î');
    formData.append('images', mockImageBuffer, { filename: 'test.jpg', contentType: 'image/jpeg' });
    
    const response = await axios.post(`${API_BASE_URL}/submissions`, formData, {
      headers: {
        'Authorization': `Bearer ${user.token}`,
        ...formData.getHeaders()
      },
      timeout: 30000
    });
    
    console.log('‚úÖ File Upload ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
  } catch (error) {
    console.log('‚ùå File Upload ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
    console.log(`   Error: ${error.response?.data?.error || error.message}`);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...\n');
  
  // 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
  const apiConnected = await testApiConnection();
  
  // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Model API
  const modelApiConnected = await testModelApiConnection();
  
  // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
  const authResults = await testAuthentication();
  
  // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Endpoints
  if (apiConnected) {
    await testApiEndpoints(authResults);
  }
  
  // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Database
  if (apiConnected) {
    await testDatabase();
  }
  
  // 6. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö File Upload
  if (apiConnected) {
    await testFileUpload(authResults);
  }
  
  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:');
  console.log(`   API Server: ${apiConnected ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Model API: ${modelApiConnected ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Authentication: ${authResults.filter(r => r.success).length}/${authResults.length} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
  
  if (!apiConnected) {
    console.log('\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port 5000');
    console.log('   ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: cd .. && npm start');
  }
  
  if (!modelApiConnected) {
    console.log('\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Model API ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà port 8000');
    console.log('   ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: cd ../../../web-infer && source venv/bin/activate && python app.py');
  }
  
  console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}

main().catch(console.error); 