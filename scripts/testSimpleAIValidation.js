const axios = require('axios');
const FormData = require('form-data');

const API_BASE_URL = 'http://localhost:5000/api';

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const TEST_DATA = {
  // User token (‡∏ï‡πâ‡∏≠‡∏á login ‡∏Å‡πà‡∏≠‡∏ô)
  token: 'your-user-token-here',
  
  // Contest ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  contestId: '4c26a5fb-f58b-4b02-96fe-c5370c81db79', // ‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡πÑ‡∏ó‡∏¢ (A, E, D)
  
  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î
  bettaName: '‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI',
  bettaType: 'B', // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó B (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏ß‡∏î‡∏ô‡∏µ‡πâ)
  bettaAgeMonths: 6,
};

async function testContestSubmission() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Contest Submission with AI Validation (Mock)...\n');
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á mock image buffer
    const mockImageBuffer = Buffer.from('fake image data for testing');
    const formData = new FormData();
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î
    formData.append('contest_id', TEST_DATA.contestId);
    formData.append('betta_name', TEST_DATA.bettaName);
    formData.append('betta_type', TEST_DATA.bettaType);
    formData.append('betta_age_months', TEST_DATA.bettaAgeMonths.toString());
    formData.append('images', mockImageBuffer, { filename: 'test.jpg', contentType: 'image/jpeg' });
    
    console.log('üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Contest API...');
    console.log('   - Contest ID:', TEST_DATA.contestId);
    console.log('   - Betta Type:', TEST_DATA.bettaType);
    console.log('   - Expected Warning: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó B ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏ß‡∏î‡∏ô‡∏µ‡πâ');
    console.log('   - Note: Model API ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏£‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
    
    const response = await axios.post(`${API_BASE_URL}/submissions/compete`, formData, {
      headers: {
        'Authorization': `Bearer ${TEST_DATA.token}`,
        ...formData.getHeaders()
      }
    });
    
    console.log('\n‚úÖ Response:', JSON.stringify(response.data, null, 2));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö AI validation
    if (response.data.aiValidation) {
      console.log('\nü§ñ AI Validation Result:');
      console.log('   - Warning:', response.data.aiValidation.warning.message);
      console.log('   - Severity:', response.data.aiValidation.warning.severity);
      console.log('   - AI Predicted Type:', response.data.aiValidation.aiPredictedType);
      console.log('   - User Selected Type:', response.data.aiValidation.userSelectedType);
      console.log('   - Confidence:', response.data.aiValidation.confidence);
    } else {
      console.log('\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ AI validation result (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Model API ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)');
    }
    
  } catch (error) {
    console.error('‚ùå Contest Submission Error:', error.response?.data || error.message);
  }
}

async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI Validation System (Mock)...\n');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Contest Submission
  await testContestSubmission();
  
  console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
}

main(); 