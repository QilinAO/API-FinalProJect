const axios = require('axios');
const fs = require('fs');

async function testSimpleGradioAPI() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gradio API ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢...\n');
  
  try {
    const testImagePath = './test_betta_fish.jpg';
    
    if (!fs.existsSync(testImagePath)) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
      return;
    }

    console.log('üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...');
    
    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ FormData ‡πÅ‡∏ó‡∏ô
    const FormData = require('form-data');
    const formData = new FormData();
    
    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á FormData
    const imageStream = fs.createReadStream(testImagePath);
    formData.append('data', JSON.stringify([null])); // input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gradio
    formData.append('files', imageStream, 'betta.jpg');
    
    // ‡∏•‡∏≠‡∏á endpoint ‡∏≠‡∏∑‡πà‡∏ô
    const endpoints = [
      '/gradio_api/run/predict',
      '/api/predict', 
      '/run/predict',
      '/predict'
    ];
    
    const baseUrl = 'https://qilinao-betta-ts-space.hf.space';
    
    for (const endpoint of endpoints) {
      try {
        console.log(`üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö endpoint: ${endpoint}`);
        
        const response = await axios.post(`${baseUrl}${endpoint}`, formData, {
          headers: {
            ...formData.getHeaders(),
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ ${endpoint} - Status: ${response.status}`);
        console.log('üìä Response:', JSON.stringify(response.data, null, 2));
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
        if (response.data && response.status === 200) {
          console.log('\nüéâ ‡∏û‡∏ö endpoint ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!');
          
          // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
          if (Array.isArray(response.data) && response.data.length >= 2) {
            const prediction = response.data[0];
            const probabilities = response.data[1];
            
            console.log('\nüîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
            console.log('üèÜ Prediction:', prediction);
            
            if (probabilities && typeof probabilities === 'object') {
              console.log('üìà Probabilities:');
              Object.entries(probabilities).forEach(([label, prob]) => {
                console.log(`   ${label}: ${(prob * 100).toFixed(2)}%`);
              });
              
              // ‡∏´‡∏≤ top prediction
              const topEntry = Object.entries(probabilities).reduce((a, b) => 
                a[1] > b[1] ? a : b
              );
              
              console.log(`\nüéØ Top: ${topEntry[0]} (${(topEntry[1] * 100).toFixed(2)}%)`);
              
              // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô betta type
              const bettaType = extractBettaType(topEntry[0]);
              console.log(`üê† Betta Type: ${bettaType}`);
            }
          }
          
          return; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
        }
        
      } catch (error) {
        console.log(`‚ùå ${endpoint} - Error: ${error.response?.status || error.message}`);
      }
    }
    
    console.log('\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
    
    // ‡∏•‡∏≠‡∏á‡∏î‡∏π Space ‡∏ß‡πà‡∏≤‡∏°‡∏µ API ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Space info...');
    try {
      const infoResponse = await axios.get(`${baseUrl}/info`, { timeout: 10000 });
      console.log('üìä Space Info:', JSON.stringify(infoResponse.data, null, 2));
    } catch (e) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Space info ‡πÑ‡∏î‡πâ');
    }
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  }
}

function extractBettaType(label) {
  const regionMapping = {
    'isaan': 'A',
    'mahachai': 'B', 
    'south': 'C'
  };
  
  const lowerLabel = label.toLowerCase();
  for (const [region, type] of Object.entries(regionMapping)) {
    if (lowerLabel.includes(region)) {
      return type;
    }
  }
  
  return 'UNKNOWN';
}

testSimpleGradioAPI().catch(console.error);
