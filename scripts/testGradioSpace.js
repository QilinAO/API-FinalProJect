const axios = require('axios');
const fs = require('fs');
const FormData = require('form-data');

// HuggingFace Space URL
const SPACE_URL = 'https://qilinao-betta-ts-space.hf.space';
const GRADIO_API_URL = `${SPACE_URL}/api/predict`;

async function testGradioSpace() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö HuggingFace Space ‡∏ú‡πà‡∏≤‡∏ô Gradio API...\n');
  
  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Space ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log('üì° 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Space...');
    
    try {
      const spaceStatus = await axios.get(SPACE_URL, { timeout: 10000 });
      console.log('‚úÖ Space ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    } catch (error) {
      console.log('‚ö†Ô∏è Space ‡∏≠‡∏≤‡∏à‡∏Å‡∏≥‡∏•‡∏±‡∏á loading ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
    }
    
    // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const testImagePath = './test_betta_fish.jpg';
    
    if (!fs.existsSync(testImagePath)) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testImagePath);
      return;
    }

    console.log('\nüì° 2. ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gradio API...');
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gradio, ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô base64 ‡∏´‡∏£‡∏∑‡∏≠ file path
    const imageBuffer = fs.readFileSync(testImagePath);
    const base64Image = `data:image/jpeg;base64,${imageBuffer.toString('base64')}`;
    
    // Gradio API format
    const requestData = {
      data: [base64Image], // input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gradio interface
      fn_index: 0 // function index (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° interface)
    };
    
    console.log('üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gradio...');
    
    const response = await axios.post(GRADIO_API_URL, requestData, {
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 60000 // Gradio ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤
    });

    console.log('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Space!');
    console.log('\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
    console.log(JSON.stringify(response.data, null, 2));
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if (response.data && response.data.data) {
      console.log('\nüîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:');
      const result = response.data.data[0]; // ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏£‡∏Å
      
      if (typeof result === 'object') {
        console.log('üìà Prediction scores:');
        Object.entries(result).forEach(([label, score]) => {
          console.log(`   ${label}: ${(score * 100).toFixed(2)}%`);
        });
        
        // ‡∏´‡∏≤ prediction ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        const topPrediction = Object.entries(result).reduce((a, b) => 
          a[1] > b[1] ? a : b
        );
        console.log(`\nüèÜ Top prediction: ${topPrediction[0]} (${(topPrediction[1] * 100).toFixed(2)}%)`);
      }
    }
    
    console.log('\nüéØ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:');
    console.log('   1. ‡∏õ‡∏£‡∏±‡∏ö modelApiService.js ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gradio API');
    console.log('   2. ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö response ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°');
    console.log('   3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï environment variables');
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    
    if (error.response) {
      console.error('üìÑ Response Status:', error.response.status);
      console.error('üìÑ Response Data:', error.response.data);
    }
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
      console.log('   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Space URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      console.log('   2. Space ‡∏≠‡∏≤‡∏à‡∏Å‡∏≥‡∏•‡∏±‡∏á sleeping - ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      console.log('   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gradio API endpoint');
    }
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gradio API endpoints
async function checkGradioEndpoints() {
  console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Gradio API endpoints...');
  
  const endpoints = [
    '/api/predict',
    '/api',
    '/gradio_api/predict',
    '/predict'
  ];
  
  for (const endpoint of endpoints) {
    try {
      const url = `${SPACE_URL}${endpoint}`;
      console.log(`   ‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${url}`);
      
      const response = await axios.get(url, { timeout: 5000 });
      console.log(`   ‚úÖ ${endpoint} - Status: ${response.status}`);
      
    } catch (error) {
      console.log(`   ‚ùå ${endpoint} - Error: ${error.response?.status || error.code}`);
    }
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function main() {
  await testGradioSpace();
  await checkGradioEndpoints();
}

main().catch(console.error);
