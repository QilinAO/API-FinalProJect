// ======================================================================
// File: src/services/modelApiService.js
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ HuggingFace Model API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î
// ======================================================================

const axios = require('axios');
// ‡πÉ‡∏ä‡πâ Dynamic Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ES Module
let Client = null;

class ModelApiService {
  constructor() {
    this.timeout = 60000; // 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (Gradio ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô)
    this.huggingFaceToken = process.env.HUGGINGFACE_API_TOKEN;
    this.spaceId = process.env.HUGGINGFACE_SPACE_ID || 'QilinAO/betta-ts-space';

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Space URL ‡∏à‡∏≤‡∏Å ENV ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏°‡∏≠ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå huggingface.co/spaces ‡πÅ‡∏•‡∏∞‡πÇ‡∏î‡πÄ‡∏°‡∏ô .hf.space)
    const resolveSpaceUrl = () => {
      const raw = (process.env.HUGGINGFACE_SPACE_URL || '').trim();
      if (raw) {
        // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: https://huggingface.co/spaces/<owner>/<space>
        const m = raw.match(/\/spaces\/([^/]+)\/([^/?#]+)/i);
        if (m) {
          const sub = `${m[1]}-${m[2]}`.toLowerCase();
          return `https://${sub}.hf.space`;
        }
        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÇ‡∏î‡πÄ‡∏°‡∏ô .hf.space ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
        if (/\.hf\.space\b/i.test(raw)) return raw.replace(/\/$/, '');
      }
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ URL ‡πÉ‡∏´‡πâ derive ‡∏à‡∏≤‡∏Å SPACE_ID (owner/space)
      if (this.spaceId && this.spaceId.includes('/')) {
        const sub = this.spaceId.replace('/', '-').toLowerCase();
        return `https://${sub}.hf.space`;
      }
      return 'https://qilinao-betta-ts-space.hf.space';
    };
    this.spaceUrl = resolveSpaceUrl();
    
    // Â∞äÈáçÁéØÂ¢ÉÂèòÈáèÔºö‰ªÖÂΩìÊòæÂºè‰∏∫ 'true' Êó∂ÂêØÁî® GradioÔºõÈªòËÆ§ falseÔºåÈÅøÂÖçÊú¨Âú∞ËØØËøûÂ§ñÁΩë
    this.useGradioAPI = process.env.USE_GRADIO_API === 'true';
    // Á¶ªÁ∫ø/Êú¨Âú∞Áü≠Ë∑ØÊ†áÂøóÔºöÂºÄÂêØÂêé‰∏çËÆøÈóÆ‰ªª‰ΩïÂ§ñÈÉ®ÁΩëÁªú
    this.offlineMode = String(process.env.OFFLINE_AUTH || '').toLowerCase() === 'true';
    
    // URLs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    this.inferenceURL = 'https://api-inference.huggingface.co/models';
    this.gradioURL = `${this.spaceUrl}/gradio_api/call`;
    
    // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Space spec
    this.spaceSpec = null;
    this.gradioClient = null;
    
    if (!this.huggingFaceToken) {
      console.warn('‚ö†Ô∏è HUGGINGFACE_API_TOKEN not found in environment variables');
      console.warn('   Model API will work in limited mode');
    } else {
      console.log('üîë HuggingFace API Token: ‚úÖ Set');
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î Gradio ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Token ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î offline ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î 502 ‡πÉ‡∏ô dev
    if (!this.useGradioAPI && !this.huggingFaceToken && !this.offlineMode) {
      this.offlineMode = true;
      console.log('üõ†Ô∏è  Auto-enabled OFFLINE mode (no Gradio and no token)');
    }
    
    console.log(`ü§ñ Model Configuration:`);
    console.log(`   üìç Space ID: ${this.spaceId}`);
    console.log(`   üåê Space URL: ${this.spaceUrl}`);
    console.log(`   üîß API Type: ${this.useGradioAPI ? 'Gradio Space' : 'Inference/Disabled'}`);
    if (this.offlineMode) {
      console.log('üõ†Ô∏è  OFFLINE_AUTH enabled: Model API calls will be mocked locally');
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HuggingFace API
   */
  getHeaders() {
    return {
      'Authorization': `Bearer ${this.huggingFaceToken}`,
      'Content-Type': 'application/json'
    };
  }

  /**
   * ËøîÂõûÊú¨Âú∞Á¶ªÁ∫øÁöÑÊ®°ÊãüÁªìÊûúÔºà‰∏çËÆøÈóÆÁΩëÁªúÔºâ
   */
  buildOfflineMockResult() {
    // ËøîÂõû‰∏Ä‰∏™‰ΩéÁΩÆ‰ø°Â∫¶„ÄÅÊèêÁ§∫‚ÄúÂÖ∂ÂÆÉ/‰∏çÁ°ÆÂÆö‚ÄùÁöÑÁªìÊûúÔºåÁªìÊûÑ‰∏éÂâçÁ´ØÈ¢ÑÊúü‰∏ÄËá¥
    const formattedData = {
      top1: { prob: 0.0 },
      final_label: {
        code: 'OTHER',
        name: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ / ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à',
        reason: 'OFFLINE Ê®°ÂºèÔºöÊú™Ë∞ÉÁî®Â§ñÈÉ®Ê®°ÂûãÔºåÊó†Ê≥ïÁ°ÆÂÆöÁ±ªÂûã'
      },
      is_confident: false,
      topk: []
    };
    return { success: true, data: formattedData };
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡πÄ‡∏õ‡∏Å‡∏Ç‡∏≠‡∏á Space ‡πÅ‡∏•‡∏∞‡∏´‡∏≤ predict endpoint
   */
  async getSpaceSpec() {
    if (this.offlineMode) {
      throw new Error('Offline mode - no Space spec');
    }
    if (this.spaceSpec) {
      return this.spaceSpec; // ‡πÉ‡∏ä‡πâ cache
    }

    try {
      console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏™‡πÄ‡∏õ‡∏Å‡∏Ç‡∏≠‡∏á Space...');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Gradio client - ‡πÉ‡∏ä‡πâ Dynamic Import
      if (!Client) {
        const { Client: GradioClient } = await import('@gradio/client');
        Client = GradioClient;
      }
      this.gradioClient = await Client.connect(this.spaceUrl);
      
      // ‡∏î‡∏∂‡∏á API info
      const apiInfo = this.gradioClient.config;
      
      console.log('‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡πÄ‡∏õ‡∏Å Space ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log('üìä Space Dependencies:', apiInfo.dependencies?.length || 0);
      
      // ‡∏´‡∏≤ predict endpoint
      let predictEndpoint = null;
      if (apiInfo.dependencies) {
        for (const dep of apiInfo.dependencies) {
          if (dep.api_name === 'predict' || dep.api_name === '/predict') {
            predictEndpoint = dep;
            break;
          }
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ api_name ‡πÅ‡∏ï‡πà‡∏°‡∏µ targets ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô submit button
          if (!predictEndpoint && dep.targets && dep.targets.some(t => t[1] === 'click')) {
            predictEndpoint = dep;
          }
        }
      }
      
      if (predictEndpoint) {
        console.log(`‚úÖ ‡∏û‡∏ö predict endpoint: ${predictEndpoint.api_name || 'unnamed'}`);
        console.log(`üìä Input components: ${predictEndpoint.inputs?.length || 0}`);
        console.log(`üìä Output components: ${predictEndpoint.outputs?.length || 0}`);
      } else {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö predict endpoint ‡πÉ‡∏ô‡∏™‡πÄ‡∏õ‡∏Å');
      }
      
      this.spaceSpec = {
        config: apiInfo,
        predictEndpoint: predictEndpoint
      };
      
      return this.spaceSpec;
      
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡πÄ‡∏õ‡∏Å Space ‡πÑ‡∏î‡πâ:', error.message);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Space ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  async checkModelStatus() {
    try {
      if (this.offlineMode) return false;
      if (this.useGradioAPI) {
        const response = await axios.get(this.spaceUrl, { timeout: 10000 });
        return response.status === 200;
      } else {
        const response = await axios.get(`${this.inferenceURL}/${this.spaceId}`, {
          headers: this.getHeaders(),
          timeout: 5000
        });
        return response.status === 200;
      }
    } catch (error) {
      console.error('Model/Space status check failed:', error.message);
      return false;
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
   * @param {Buffer} imageBuffer - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Buffer
   * @param {number} threshold - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (default: 0.90)
   * @returns {Promise<Object>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  async predictBettaType(imageBuffer, threshold = 0.90) {
    if (this.offlineMode) {
      return this.buildOfflineMockResult();
    }
    if (this.useGradioAPI) {
      return await this.predictWithGradio(imageBuffer, threshold);
    } else {
      return await this.predictWithInference(imageBuffer, threshold);
    }
  }

  /**
   * ‡πÉ‡∏ä‡πâ Gradio Space API ‡∏î‡πâ‡∏ß‡∏¢ @gradio/client
   */
  async predictWithGradio(imageBuffer, threshold = 0.90) {
    try {
      if (this.offlineMode) {
        return this.buildOfflineMockResult();
      }
      // ‡∏î‡∏∂‡∏á‡∏™‡πÄ‡∏õ‡∏Å‡∏Ç‡∏≠‡∏á Space ‡∏Å‡πà‡∏≠‡∏ô
      const spec = await this.getSpaceSpec();
      
      if (!this.gradioClient) {
        throw new Error('Gradio client not initialized');
      }
      
      if (!spec.predictEndpoint) {
        throw new Error('No predict endpoint found in Space spec');
      }
      
      console.log('üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gradio Space...');
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Blob ‡∏à‡∏≤‡∏Å imageBuffer (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö @gradio/client)
      const imageBlob = new Blob([imageBuffer], { type: 'image/jpeg' });
      
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ predict ‡∏ï‡∏≤‡∏° api_name ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏™‡πÄ‡∏õ‡∏Å
      const apiName = spec.predictEndpoint.api_name || 'predict';
      
      console.log(`üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API: ${apiName}`);
      
      const result = await this.gradioClient.predict(apiName, [imageBlob]);
      
      console.log('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gradio Space');
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      return this.formatGradioClientResult(result.data, threshold);
      
    } catch (error) {
      console.error('Gradio Client Error:', error.message);
      
      // Fallback: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ axios ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
      console.log('üîÑ ‡∏•‡∏≠‡∏á fallback ‡∏î‡πâ‡∏ß‡∏¢ axios...');
      const fb = await this.predictWithGradioAxios(imageBuffer, threshold);
      if (!fb.success) {
        console.warn('Gradio fallback failed. Using offline mock result.');
        return this.buildOfflineMockResult();
      }
      return fb;
    }
  }

  /**
   * Fallback: ‡πÉ‡∏ä‡πâ axios ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gradio API ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
   */
  async predictWithGradioAxios(imageBuffer, threshold = 0.90) {
    try {
      if (this.offlineMode) {
        return this.buildOfflineMockResult();
      }
      // ‡πÅ‡∏õ‡∏•‡∏á Buffer ‡πÄ‡∏õ‡πá‡∏á base64
      const base64Image = `data:image/jpeg;base64,${imageBuffer.toString('base64')}`;
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á session hash
      const sessionHash = Math.random().toString(36).substring(2);
      
      // Gradio API format
      const requestData = {
        data: [
          {
            path: null,
            url: base64Image,
            size: imageBuffer.length,
            orig_name: "betta_image.jpg",
            mime_type: "image/jpeg",
            is_stream: false,
            meta: { _type: "gradio.FileData" }
          }
        ],
        event_data: null,
        fn_index: 2, // predict function index
        trigger_id: 12, // submit button ID
        session_hash: sessionHash
      };

      const response = await axios.post(`${this.gradioURL}/predict`, requestData, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'text/event-stream',
        },
        timeout: this.timeout
      });

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• event stream response
      const result = await this.processGradioResponse(response.data, threshold);
      
      if (!result.success) {
        throw new Error(result.error || 'Failed to get prediction from Gradio');
      }

      return result;
      
    } catch (error) {
      console.error('Gradio Axios Fallback Error:', error.message);
      // ‡πÉ‡∏ä‡πâ offline mock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î 502 ‡∏ö‡∏ô frontend
      return this.buildOfflineMockResult();
    }
  }

  /**
   * ‡πÉ‡∏ä‡πâ HuggingFace Inference API
   */
  async predictWithInference(imageBuffer, threshold = 0.90) {
    try {
      if (this.offlineMode) {
        return this.buildOfflineMockResult();
      }
      if (!this.huggingFaceToken) {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí ‡πÉ‡∏ä‡πâ offline mock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î 502 ‡πÉ‡∏ô dev
        return this.buildOfflineMockResult();
      }

      const response = await axios.post(
        `${this.inferenceURL}/${this.spaceId}`, // ‡πÉ‡∏ä‡πâ this.spaceId ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å modelName ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        imageBuffer,
        {
          headers: {
            'Authorization': `Bearer ${this.huggingFaceToken}`,
            'Content-Type': 'image/jpeg'
          },
          timeout: this.timeout
        }
      );

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å HuggingFace ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
      const predictions = response.data;
      if (!Array.isArray(predictions) || predictions.length === 0) {
        throw new Error('Invalid response from HuggingFace model');
      }

      return this.formatPredictionResult(predictions, threshold);
      
    } catch (error) {
      console.error('HuggingFace Inference API Error:', error.message);
      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô 502: ‡∏Ñ‡∏∑‡∏ô offline mock
      return this.buildOfflineMockResult();
    }
  }

  /**
   * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Gradio response
   */
  async processGradioResponse(responseData, threshold = 0.90) {
    try {
      if (typeof responseData === 'string') {
        const lines = responseData.split('\n');
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.substring(6));
              if (data.msg === 'process_completed' && data.output?.data) {
                return this.formatGradioResult(data.output.data, threshold);
              }
            } catch (e) {
              continue;
            }
          }
        }
      }
      
      throw new Error('No valid result found in Gradio response');
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å @gradio/client ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Frontend ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
   */
  formatGradioClientResult(clientData, threshold = 0.90) {
    try {
      console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gradio Client:', JSON.stringify(clientData, null, 2));
      
      if (Array.isArray(clientData) && clientData.length >= 2) {
        const prediction = clientData[0]; // ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        const probabilities = clientData[1]; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        
        if (probabilities && typeof probabilities === 'object') {
          // ‡∏´‡∏≤ top prediction
          const topEntry = Object.entries(probabilities).reduce((a, b) => 
            a[1] > b[1] ? a : b
          );
          
          const bettaInfo = this.getBettaTypeInfo(topEntry[0]);
          const confidence = topEntry[1];
          const isConfident = confidence >= threshold; // ‡πÉ‡∏ä‡πâ threshold ‡∏à‡∏≤‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
          
          // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Frontend ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
          const formattedData = {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BettaEvaluationForm
            top1: {
              prob: confidence
            },
            final_label: {
              code: bettaInfo.code,
              name: bettaInfo.name,
              reason: `AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏†‡∏≤‡∏û‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå${bettaInfo.name} ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ${(confidence * 100).toFixed(1)}%`
            },
            is_confident: isConfident,
            topk: Object.entries(probabilities)
              .sort((a, b) => b[1] - a[1])
              .map(([label, score]) => {
                const info = this.getBettaTypeInfo(label);
                return {
                  label,
                  score,
                  code: info.code,
                  name: info.name
                };
              }),
            
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SubmissionFormModal (backward compatibility)
            predictions: Object.entries(probabilities).map(([label, score]) => ({
              label,
              score,
              code: this.extractBettaTypeFromLabel(label)
            }))
          };

          return {
            success: true,
            data: formattedData
          };
        }
      }
      
      throw new Error('Invalid Gradio Client result format');
    } catch (error) {
      console.error('Error formatting Gradio Client result:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Gradio (axios fallback)
   */
  formatGradioResult(gradioData, threshold = 0.90) {
    try {
      if (Array.isArray(gradioData) && gradioData.length >= 2) {
        const prediction = gradioData[0]; // ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
        const probabilities = gradioData[1]; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
        
        if (probabilities && typeof probabilities === 'object') {
          // ‡∏´‡∏≤ top prediction
          const topEntry = Object.entries(probabilities).reduce((a, b) => 
            a[1] > b[1] ? a : b
          );
          const confidence = topEntry[1];
          const isConfident = confidence >= threshold;
          
          const formattedData = {
            final_label: {
              code: this.extractBettaTypeFromLabel(topEntry[0]),
              confidence: confidence,
              label: topEntry[0]
            },
            top1: {
              prob: confidence,
              label: topEntry[0]
            },
            is_confident: isConfident,
            predictions: Object.entries(probabilities).map(([label, score]) => ({
              label,
              score,
              code: this.extractBettaTypeFromLabel(label)
            }))
          };

          return {
            success: true,
            data: formattedData
          };
        }
      }
      
      throw new Error('Invalid Gradio result format');
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Inference API
   */
  formatPredictionResult(predictions, threshold = 0.90) {
    const topPrediction = predictions.reduce((prev, current) => 
      (prev.score > current.score) ? prev : current
    );

    const isConfident = (topPrediction?.score || 0) >= threshold;

    const formattedData = {
      final_label: {
        code: this.extractBettaTypeFromLabel(topPrediction.label),
        confidence: topPrediction.score,
        label: topPrediction.label
      },
      top1: {
        prob: topPrediction.score,
        label: topPrediction.label
      },
      is_confident: isConfident,
      predictions: predictions.slice(0, 3).map(pred => ({
        label: pred.label,
        score: pred.score,
        code: this.extractBettaTypeFromLabel(pred.label)
      }))
    };

    return {
      success: true,
      data: formattedData
    };
  }

  /**
   * ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î (A, B, C, D, E, F, G, H) ‡∏à‡∏≤‡∏Å label ‡∏Ç‡∏≠‡∏á HuggingFace model
   * @param {string} label - label ‡∏à‡∏≤‡∏Å HuggingFace model QilinAO/betta-ts-space
   * @returns {string} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î
   */
  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å region label ‡πÄ‡∏õ‡πá‡∏ô betta type ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢
   */
  getBettaTypeInfo(label) {
    if (!label) return { code: 'UNKNOWN', name: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö' };
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÅ‡∏ô‡∏Å isaan / mahachai / south
    // ‡∏ï‡∏≤‡∏° bettaTypes.js: A=‡∏Å‡∏•‡∏≤‡∏á/‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, B=‡∏≠‡∏µ‡∏™‡∏≤‡∏ô, C=‡πÉ‡∏ï‡πâ, D=‡∏°‡∏´‡∏≤‡∏ä‡∏±‡∏¢
    const regionMapping = {
      'isaan': { code: 'B', name: '‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏†‡∏≤‡∏Ñ‡∏≠‡∏µ‡∏™‡∏≤‡∏ô' },
      'mahachai': { code: 'D', name: '‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏°‡∏´‡∏≤‡∏ä‡∏±‡∏¢' }, 
      'south': { code: 'C', name: '‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏†‡∏≤‡∏Ñ‡πÉ‡∏ï‡πâ' }
    };
    
    const lowerLabel = label.toLowerCase();
    for (const [region, info] of Object.entries(regionMapping)) {
      if (lowerLabel.includes(region)) {
        return info;
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà region model ‡∏•‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
    const patterns = [
      /\b([A-H])\b/i,           // "A", "B", "C" ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏¢‡∏Å
      /type[_\s]*([A-H])/i,     // "Type_A", "type A", "typeB"
      /class[_\s]*([A-H])/i,    // "Class_A", "class A"
      /label[_\s]*([A-H])/i,    // "Label_A", "label A"
      /betta[_\s]*([A-H])/i,    // "Betta_A", "betta A"
      /([A-H])$/i,              // ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ A-H
      /^([A-H])/i,              // ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ A-H
    ];
    
    for (const pattern of patterns) {
      const match = label.match(pattern);
      if (match) {
        const code = match[1].toUpperCase();
        return { code, name: `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${code}` };
      }
    }
    
    // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏î‡πÜ ‡∏•‡∏≠‡∏á log ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    console.warn(`Unable to extract betta type from label: "${label}"`);
    return { code: 'UNKNOWN', name: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö' };
  }

  // Backward compatibility
  extractBettaTypeFromLabel(label) {
    return this.getBettaTypeInfo(label).code;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
   * @param {Array<Buffer>} imageBuffers - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Buffer
   * @param {number} threshold - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (default: 0.90)
   * @returns {Promise<Object>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  async predictBettaTypeBatch(imageBuffers, threshold = 0.90) {
    try {
      if (!this.huggingFaceToken) {
        throw new Error('HuggingFace API token is required');
      }

      // HuggingFace Inference API ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö batch processing ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      // ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
      const batchResults = await Promise.all(
        imageBuffers.map(async (buffer, index) => {
          try {
            const result = await this.predictBettaType(buffer, threshold);
            return {
              index,
              success: result.success,
              data: result.data,
              error: result.error
            };
          } catch (error) {
            return {
              index,
              success: false,
              error: error.message
            };
          }
        })
      );

      // ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
      const successfulResults = batchResults.filter(r => r.success);
      
      if (successfulResults.length === 0) {
        return {
          success: false,
          error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏î‡πÜ ‡πÑ‡∏î‡πâ'
        };
      }

      // ‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
      const typeVotes = {};
      successfulResults.forEach(result => {
        const type = result.data.final_label.code;
        typeVotes[type] = (typeVotes[type] || 0) + result.data.final_label.confidence;
      });

      const mostVotedType = Object.keys(typeVotes).reduce((a, b) => 
        typeVotes[a] > typeVotes[b] ? a : b
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°
      const averageConfidence = successfulResults.reduce((sum, result) => 
        sum + result.data.final_label.confidence, 0
      ) / successfulResults.length;

      const batchData = {
        batch_results: batchResults,
        consensus: {
          predicted_type: mostVotedType,
          confidence: averageConfidence,
          votes: typeVotes
        },
        processed_images: imageBuffers.length,
        successful_images: successfulResults.length
      };

      return {
        success: true,
        data: batchData
      };
    } catch (error) {
      console.error('HuggingFace Model API Batch Error:', error.message);
      return {
        success: false,
        error: error.response?.data?.error || error.message
      };
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @returns {Promise<boolean>}
   */
  async isModelReady() {
    try {
      if (this.offlineMode) return false;
      if (!this.huggingFaceToken) {
        return false;
      }
      return await this.checkModelStatus();
    } catch (error) {
      console.error('HuggingFace Model API Health Check Error:', error.message);
      return false;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• taxonomy ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HuggingFace)
   * @returns {Promise<Object>}
   */
  async getModelTaxonomy() {
    try {
      if (!this.huggingFaceToken) {
        throw new Error('HuggingFace API token is required');
      }

      // HuggingFace ‡πÑ‡∏°‡πà‡∏°‡∏µ endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö taxonomy ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      const modelInfo = await axios.get(`https://huggingface.co/api/models/${this.spaceId}`, { // ‡πÉ‡∏ä‡πâ this.spaceId ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å modelName ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        timeout: 5000
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á taxonomy ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
      const taxonomy = {
        classes: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'],
        model_info: {
          name: this.spaceId, // ‡πÉ‡∏ä‡πâ this.spaceId ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å modelName ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
          pipeline_tag: modelInfo.data.pipeline_tag || 'image-classification',
          library_name: modelInfo.data.library_name || 'transformers'
        }
      };

      return {
        success: true,
        data: { taxonomy }
      };
    } catch (error) {
      console.error('HuggingFace Model Taxonomy Error:', error.message);
      return {
        success: false,
        error: error.response?.data?.error || error.message
      };
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á - ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•)
   * @param {string} userSelectedType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (A, B, C, D, E, F, G, H)
   * @param {Array<string>} allowedTypes - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏ß‡∏î‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
   * @param {string} aiPredictedType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà AI ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
   * @param {number} confidence - ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏Ç‡∏≠‡∏á AI (0-1)
   * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  validateBettaType(userSelectedType, allowedTypes, aiPredictedType, confidence = 0) {
    const isUserTypeAllowed = allowedTypes.includes(userSelectedType);
    const isAiTypeAllowed = allowedTypes.includes(aiPredictedType);
    const isAiConfident = confidence >= 0.90;
    const isTypeMatch = userSelectedType === aiPredictedType;

    let warning = null;
    let severity = 'info';

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà AI ‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
    if (!isAiConfident) {
      warning = {
        message: 'AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ï‡πà‡∏≥)',
        severity: 'warning',
        type: 'low_confidence'
      };
    }
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà AI ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
    else if (!isTypeMatch) {
      warning = {
        message: `AI ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${aiPredictedType}" ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${userSelectedType}"`,
        severity: 'warning',
        type: 'type_mismatch',
        aiPrediction: aiPredictedType,
        userSelection: userSelectedType
      };
    }
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà AI ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    else if (!isAiTypeAllowed) {
      warning = {
        message: `AI ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏•‡∏≤‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${aiPredictedType}" ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏ß‡∏î‡∏ô‡∏µ‡πâ`,
        severity: 'error',
        type: 'unauthorized_type',
        aiPrediction: aiPredictedType
      };
    }

    return {
      isValid: isUserTypeAllowed && (isAiConfident ? isAiTypeAllowed : true),
      isUserTypeAllowed,
      isAiTypeAllowed,
      isAiConfident,
      isTypeMatch,
      warning,
      confidence,
      userSelectedType,
      aiPredictedType
    };
  }
}

module.exports = new ModelApiService();
