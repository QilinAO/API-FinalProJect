// src/services/checklistContestService.js
const { supabaseAdmin } = require('../config/supabase');
const { sendMessage } = require('../utils/telegram');

const T = (v) => (v ? '‚úÖ' : '‚ùå');
const S = (title) => `\n<b>${title}</b>`;
const esc = (s) => String(s ?? '').replace(/[&<>]/g, c => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;' }[c]));

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ï‡∏≤‡∏° view v_user_checklist_live)
 */
function buildUserChecklistMessage(row) {
  const base  = row.checklist_base || {};
  const part  = row.checklist_participant || {};
  const judge = row.checklist_judge || {};

  const lines = [
    'üßæ <b>User Checklist (Contest)</b>',
    `‚Ä¢ user: <code>${esc(row.user_id)}</code>`,
    `‚Ä¢ role: <code>${esc(row.role || '-')}</code>`,
    S('Base'),
    `${T(base.profile)} ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà`,
    `${T(base.email_verified)} ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•`,
    `${T(base.telegram)} ‡∏ú‡∏π‡∏Å Telegram`,
    `${T(base.notifications_received)} ‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô`,
    `${T(base.notifications_read)} ‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô`,
    S('Participant'),
    `${T(part.has_submission)} ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
    `${T(part.has_media)} ‡∏°‡∏µ‡∏™‡∏∑‡πà‡∏≠ (‡∏†‡∏≤‡∏û/‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)`,
    `${T(part.in_contest)} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏ß‡∏î`,
    `${T(part.status_moved)} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏¢‡∏±‡∏ö‡∏à‡∏≤‡∏Å pending`,
    `${T(part.scored)} ‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß`,
    S('Judge'),
    `${T(judge.is_judge)} ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£ (accepted)`,
    `${T(judge.has_assignment)} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô`,
    `${T(judge.evaluated_any)} ‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
    '',
    row.is_all_passed ? 'üéâ ‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó' : '‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó',
  ];

  return lines.join('\n');
}

/**
 * ‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
 */
function listMissingFields(row) {
  const missing = [];
  const add = (obj, prefix) => {
    Object.entries(obj || {}).forEach(([k, v]) => { if (!v) missing.push(prefix ? `${prefix}.${k}` : k); });
  };
  add(row.checklist_base, 'base');
  add(row.checklist_participant, 'participant');
  add(row.checklist_judge, 'judge');
  return missing.join(', ') || '-';
}

/**
 * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡πâ‡∏≠‡∏ô ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡∏•‡∏¥‡∏°‡∏¥‡∏ï Telegram (‚âà4096 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
 */
async function sendChunked(text, maxLen = 3900) {
  if (text.length <= maxLen) return sendMessage(text);
  const parts = [];
  let buf = [];
  let len = 0;
  for (const line of text.split('\n')) {
    const add = line + '\n';
    if (len + add.length > maxLen) {
      parts.push(buf.join('\n'));
      buf = [line];
      len = line.length;
    } else {
      buf.push(line);
      len += add.length;
    }
  }
  if (buf.length) parts.push(buf.join('\n'));
  for (const p of parts) await sendMessage(p);
}

/**
 * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏õ Telegram
 */
async function notifyUserChecklistContest(userId) {
  const { data, error } = await supabaseAdmin
    .from('v_user_checklist_live')
    .select('*')
    .eq('user_id', userId)
    .single();

  if (error) throw error;
  if (!data) throw new Error('user not found in view');

  const msg = buildUserChecklistMessage(data);
  await sendChunked(msg);
}

/**
 * ‡∏™‡πÅ‡∏Å‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î/‡∏ï‡∏≤‡∏°‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ‚Äú‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‚Äù
 * options:
 *   - limit  : ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (default 1000)
 *   - offset : ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô (default 0)
 *   - role   : ‡∏Å‡∏£‡∏≠‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ('user' | 'admin' | 'judge' | ‡∏Ø‡∏•‡∏Ø)
 *   - dryRun : ‡∏ñ‡πâ‡∏≤ true ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á Telegram ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏∑‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
 */
async function notifyAllUsersIncompleteContest(options = {}) {
  const {
    limit = 1000,
    offset = 0,
    role,
    dryRun = false,
  } = options;

  let query = supabaseAdmin
    .from('v_user_checklist_live')
    .select('user_id, role, is_all_passed, checklist_base, checklist_participant, checklist_judge');

  if (role) query = query.eq('role', role);
  if (Number.isFinite(limit) && Number.isFinite(offset)) {
    query = query.range(offset, offset + limit - 1);
  }

  const { data, error } = await query;
  if (error) throw error;

  const results = [];

  for (const row of data || []) {
    if (row.is_all_passed) continue;
    const msg = [
      '‚ö†Ô∏è <b>User Incomplete (Contest)</b>',
      `‚Ä¢ user: <code>${esc(row.user_id)}</code>`,
      `‚Ä¢ role: <code>${esc(row.role || '-')}</code>`,
      `‚Ä¢ missing: ${esc(listMissingFields(row))}`,
    ].join('\n');

    results.push({ user_id: row.user_id, role: row.role || null, message: msg });

    if (!dryRun) {
      await sendChunked(msg);
    }
  }

  return results;
}

module.exports = {
  notifyUserChecklistContest,
  notifyAllUsersIncompleteContest,
  // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
  _buildUserChecklistMessage: buildUserChecklistMessage,
  _listMissingFields: listMissingFields,
};
