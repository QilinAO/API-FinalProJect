// =======================================================================
// File: D:\ProJectFinal\Lasts\betta-fish-api\src\config\supabase.js
// (‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)
// -----------------------------------------------------------------------
// ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
// 1) ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏≤‡∏Å .env ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
// 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase Client 2 ‡∏ï‡∏±‡∏ß:
//    - supabase       : ‡πÉ‡∏ä‡πâ ANON KEY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏¢‡∏∂‡∏î‡∏ï‡∏≤‡∏° RLS)
//    - supabaseAdmin  : ‡πÉ‡∏ä‡πâ SERVICE ROLE KEY ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏Ç‡πâ‡∏≤‡∏° RLS)
// 3) ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ú‡πà‡∏≤‡∏ô admin client ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î RLS)
// 4) ‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏¥‡∏ï‡∏µ‡πâ‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö getPublicUrl
// =======================================================================

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// ---------- Environment Variables Configuration ----------
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

// ---------- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ENV ----------
const missing = [];
if (!SUPABASE_URL) missing.push('SUPABASE_URL');
if (!SUPABASE_ANON_KEY) missing.push('SUPABASE_ANON_KEY');
if (!SUPABASE_SERVICE_ROLE_KEY) missing.push('SUPABASE_SERVICE_ROLE_KEY');

if (missing.length) {
  console.error('‚ùå Missing Supabase environment variables!');
  missing.forEach((k) => console.error(`  - ${k}`));
  console.error('‚ö†Ô∏è  API will start in limited mode without database connection');
  console.error('üîß Please check Railway Environment Variables');
  
  // Create robust dummy clients instead of crashing (chain-safe)
  const makeDummyQuery = () => {
    const result = {
      // query builders
      select: () => result,
      eq: () => result,
      ilike: () => result,
      match: () => result,
      in: () => result,
      is: () => result,
      order: () => result,
      limit: () => result,
      range: () => result,
      // execution methods
      single: async () => ({ data: null, error: { message: 'Database not configured' } }),
      maybeSingle: async () => ({ data: null, error: { message: 'Database not configured' } }),
      // select without single
      then: undefined, // ensure not treated as a promise prematurely
      // head+count style (emulate shape with count)
      // Using a function returning an object with count to prevent runtime errors
      // Callers often do: const { count } = await ...select('*', { count: 'exact', head: true })
    };
    // provide a callable to simulate the head/count call path
    result.execute = async () => ({ data: [], count: 0, error: { message: 'Database not configured' } });
    return result;
  };

  const dummyClient = {
    auth: {
      getUser: async () => ({ data: { user: null }, error: { message: 'Auth not configured' } }),
      signIn: async () => ({ data: null, error: { message: 'Auth not configured' } }),
      admin: {
        getUserById: async () => ({ data: { user: null }, error: { message: 'Auth not configured' } })
      }
    },
    from: () => makeDummyQuery(),
    storage: { from: () => ({ getPublicUrl: () => ({ data: { publicUrl: '' } }) }) }
  };
  
  module.exports = {
    supabase: dummyClient,
    supabaseAdmin: dummyClient,
    getPublicUrl: () => '',
  };
  
  return;
}

console.log('üîê Supabase Configuration:');
console.log('  üìç URL:', SUPABASE_URL);
console.log('  üîë Anon Key:', SUPABASE_ANON_KEY ? '‚úÖ Set' : '‚ùå Missing');
console.log('  üóùÔ∏è Service Role Key:', SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Set' : '‚ùå Missing');
console.log('‚úÖ Using environment variables from .env file');

// ---------- ‡∏™‡∏£‡πâ‡∏≤‡∏á Client ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á ----------
// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ auth.persistSession=false & autoRefreshToken=false
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö session state ‡πÉ‡∏î ‡πÜ ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥)
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: { persistSession: false, autoRefreshToken: false },
});

const supabaseAdmin = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: { persistSession: false, autoRefreshToken: false },
});

// ---------- ‡∏¢‡∏π‡∏ó‡∏¥‡∏•‡∏¥‡∏ï‡∏µ‡πâ: ‡∏™‡∏£‡πâ‡∏≤‡∏á Public URL ‡∏à‡∏≤‡∏Å bucket/path ----------
/**
 * getPublicUrl - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ public URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Supabase Storage
 * @param {string} bucket - ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï (‡πÄ‡∏ä‡πà‡∏ô 'posters')
 * @param {string} filePath - path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ö‡∏±‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï (‡πÄ‡∏ä‡πà‡∏ô 'Profile/xxx.png')
 * @returns {string} public URL ‡∏´‡∏£‡∏∑‡∏≠ string ‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
 */
function getPublicUrl(bucket, filePath) {
  try {
    const { data } = supabase.storage.from(bucket).getPublicUrl(filePath);
    return data?.publicUrl || '';
  } catch {
    return '';
  }
}

// ---------- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ú‡πà‡∏≤‡∏ô admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î RLS) ----------
async function testConnection() {
  try {
    console.log('üîç Testing database connection...');
    
    // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ‡πÄ‡∏ä‡πà‡∏ô 'contests'
    // ‡πÉ‡∏ä‡πâ head+count ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞ (‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡πÑ‡∏î‡πâ)
    const { error } = await supabaseAdmin
      .from('contests')
      .select('*', { count: 'exact', head: true });

    if (error) {
      console.error('‚ùå Database connection failed:', error.message);
      console.error('   Details:', error.details || 'No details available');
    } else {
      console.log('‚úÖ Database connected successfully');
      console.log('   üìä Table: contests (accessible)');
    }
  } catch (err) {
    console.error('‚ùå Database connection error:', err?.message || err);
  }
}

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ config)
if (SUPABASE_URL && SUPABASE_ANON_KEY && SUPABASE_SERVICE_ROLE_KEY) {
  testConnection();
} else {
  console.log('‚ö†Ô∏è  Skipping database connection test - missing configuration');
}

// ---------- ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ----------
module.exports = {
  supabase,
  supabaseAdmin,
  getPublicUrl,
};
