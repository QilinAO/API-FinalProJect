// ======================================================================
// File: src/utils/errorReporter.js
// ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á Error ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏õ Telegram ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (redact ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß)
// ======================================================================
const os = require('os');
const telegram = require('./errorTelegram');  // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ utils/telegram.js ‡∏ó‡∏µ‡πà‡∏°‡∏µ sendMessage(), isEnabled()

// ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ env
function shouldNotify() {
  // ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô test; ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏™‡∏ß‡∏¥‡∏ï‡∏ä‡πå DEV_TELEGRAM_ERROR_NOTIFY
  if (process.env.NODE_ENV === 'test') return false;
  return telegram?.isEnabled?.() && process.env.DEV_TELEGRAM_ERROR_NOTIFY === '1';
}

// ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å headers/body
function sanitizeRequest(req = {}) {
  try {
    const headers = { ...(req.headers || {}) };
    // ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö
    delete headers.authorization;
    delete headers.cookie;
    delete headers['x-supabase-auth'];
    delete headers['x-api-key'];

    // body/query ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô
    const trim = (v) => {
      if (v == null) return v;
      const s = typeof v === 'string' ? v : JSON.stringify(v);
      return s.length > 800 ? s.slice(0, 800) + '‚Ä¶(trimmed)' : s;
    };

    return {
      method: req.method,
      url: req.originalUrl || req.url,
      ip: req.ip,
      userId: req.userId || null,
      userRole: req.userRole || null,
      headers,
      query: req.query ? JSON.parse(trim(req.query)) : req.query,
      body: req.body ? JSON.parse(trim(req.body)) : req.body,
    };
  } catch {
    // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πà‡∏≠‡∏¢ ‡πÜ ‡πÅ‡∏ó‡∏ô
    return {
      method: req.method,
      url: req.originalUrl || req.url,
      ip: req.ip,
      userId: req.userId || null,
      userRole: req.userRole || null,
    };
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4096 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡∏•‡∏¥‡∏°‡∏¥‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram)
function clip(text, max = 3900) {
  if (!text) return '';
  return text.length > max ? text.slice(0, max) + '\n‚Ä¶(clipped)' : text;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function buildMessage(err, req, extra = {}) {
  const when = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
  const env = process.env.NODE_ENV || 'development';
  const host = os.hostname();

  const reqInfo = req ? sanitizeRequest(req) : null;

  const lines = [
    'üö® *SERVER ERROR*',
    `‡πÄ‡∏ß‡∏•‡∏≤: ${when}`,
    `‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°: ${env} @ ${host}`,
  ];

  if (reqInfo) {
    lines.push(
      `‡πÄ‡∏°‡∏ò‡∏≠‡∏î: ${reqInfo.method || '-'} | URL: ${reqInfo.url || '-'}`,
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${reqInfo.userId || '-'} (role: ${reqInfo.userRole || '-'})`,
      reqInfo.ip ? `IP: ${reqInfo.ip}` : null,
    );
  }

  if (extra && extra.context) {
    lines.push(`‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: ${extra.context}`);
  }
  if (extra && extra.note) {
    lines.push(`‡πÇ‡∏ô‡πâ‡∏ï: ${extra.note}`);
  }

  lines.push(
    '',
    `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err?.message || String(err)}`,
    '',
    '*Stack (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å)*:',
    '```',
    clip(String(err?.stack || '(no stack)')),
    '```'
  );

  if (reqInfo) {
    lines.push(
      '',
      '*Request (safe)*',
      '```',
      clip(JSON.stringify(reqInfo, null, 2)),
      '```'
    );
  }

  return lines.filter(Boolean).join('\n');
}

/**
 * ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô error ‡πÑ‡∏õ Telegram (‡πÑ‡∏°‡πà throw; ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ flow ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏á)
 */
async function report(err, req = null, extra = {}) {
  try {
    if (!shouldNotify()) return;
    const text = buildMessage(err, req, extra);
    await telegram.sendMessage(text, { parse_mode: 'Markdown' });
  } catch (e) {
    // ‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    console.warn('[errorReporter] sendMessage failed:', e?.message || e);
  }
}

/**
 * ‡πÉ‡∏ä‡πâ wrap async handler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ error ‡πÇ‡∏¢‡∏ô‡πÑ‡∏õ next() ‡πÄ‡∏™‡∏°‡∏≠
 * ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏ô‡πâ‡∏ô flow express ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô try/catch ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å ‡πÜ route
 */
const wrap = (fn, extraMeta = {}) => {
  return (req, res, next) => {
    Promise.resolve(fn(req, res, next)).catch((err) => {
      // ‡πÉ‡∏™‡πà report ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô; ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÑ‡∏õ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏ô global error handler ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πá‡πÑ‡∏î‡πâ)
      report(err, req, { context: extraMeta.context || 'route' }).finally(() => next(err));
    });
  };
};

/**
 * ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏ô‡∏≠‡∏Å request (‡πÄ‡∏ä‡πà‡∏ô process-level)
 */
async function reportProcessError(err, tag = 'process') {
  try {
    if (!shouldNotify()) return;
    const when = new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' });
    const lines = [
      `üî• *${tag.toUpperCase()} ERROR*`,
      `‡πÄ‡∏ß‡∏•‡∏≤: ${when}`,
      '',
      `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err?.message || String(err)}`,
      '',
      '*Stack (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏£‡∏Å)*:',
      '```',
      clip(String(err?.stack || '(no stack)')),
      '```',
    ].join('\n');
    await telegram.sendMessage(lines, { parse_mode: 'Markdown' });
  } catch (e) {
    console.warn('[errorReporter] process error notify failed:', e?.message || e);
  }
}

module.exports = {
  report,
  wrap,
  reportProcessError,
};
